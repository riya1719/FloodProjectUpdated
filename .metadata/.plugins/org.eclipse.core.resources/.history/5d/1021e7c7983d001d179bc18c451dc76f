package com.example.demo.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.ResourceNotFoundException;

import com.example.demo.repository.VictimRepository;
import com.example.demo.model.Victim;

@RestController
@RequestMapping("/api/v1")
public class VictimController {
	
	@Autowired
	private VictimRepository  victimRepository ;
	
	// get all victims
	@GetMapping("/victims")
	public List<Victim> getAllVictims()
	{
		return victimRepository.findAll();
	}
	
	// create victim rest API
	@PostMapping ("/victims")
	public Victim createVictim(@RequestBody Victim victim)
	{
		return victimRepository.save(victim);
	}
	
	// get victim byID Rest API	
	@PostMapping ("/victims/{id}")
	public ResponseEntity<Victim> getVictimById(@PathVariable Long id)
	{
		Victim victim = victimRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Victim does not exit with id: " + id));
	return ResponseEntity.ok(victim);
	}
	
		
    // update victim rest API
	@PutMapping("/victims/{id}")
	public ResponseEntity <Victim> updateVictim(@PathVariable Long id, @RequestBody Victim victimDetails)
	{
		Victim victim = victimRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Victim does not exit with id: " + id));
		
		 victim.setVC_NAME(victimDetails.getVC_NAME());
		 victim.setVC_CONTACT(victimDetails.getVC_CONTACT());
		 victim.setVC_ADDRESS(victimDetails.getVC_ADDRESS());
		 victim.setVC_CITY(victimDetails.getVC_CITY());
		 
		 victim.setVC_EMAIL(victimDetails.getVC_EMAIL());
		 victim.setVC_USERID(victimDetails.getVC_USERID());
		 victim.setVC_PASSWORD(victimDetails.getVC_PASSWORD());

		 
	
		Victim updatedVictim = victimRepository.save(victim);
	return ResponseEntity.ok(updatedVictim);
	}
	
	// delete 
	
	@DeleteMapping("/victims/{id}")
	public ResponseEntity <Map<String,Boolean>> deleteVictim(@PathVariable Long id)
	{
		Victim victim = victimRepository.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Victim does not exit with id: " + id));
				
		victimRepository.delete(victim);
		Map<String,Boolean>response = new HashMap<>();
		
			return ResponseEntity.ok(response);
	}
	

}
