package com.example.demo.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Volunteer;
import com.example.demo.repository.VolunteerRepository;

import org.springframework.web.bind.annotation.RequestBody;

@RestController
@RequestMapping("/api/v1")
public class VolunteerController {
	@Autowired
	private VolunteerRepository  volunteerRepository ;

// get all volunteer
	
	@GetMapping("/volunteer")
	public List<Volunteer> getAllVolunteer()
	{
		return volunteerRepository.findAll();
	}


//create volunteer rest API
	@PostMapping ("/volunteer")
	public Volunteer createVictim(@RequestBody Volunteer volunteer)
	{
		return volunteerRepository.save(volunteer);
	}
	
// get volunteer byID Rest API	
		@PostMapping ("/volunteer/{id}")
		public ResponseEntity<Volunteer> getVolunteerById(@PathVariable Long id)
		{
			Volunteer volunteer = volunteerRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Volunteer does not exit with id: " + id));
		return ResponseEntity.ok(volunteer);
		}
	
		
// update volunteer rest API
		@PutMapping("/volunteer/{id}")
		public ResponseEntity <Volunteer> updateVolunteer(@PathVariable Long id, @RequestBody Volunteer volunteerDetails)
		{
			Volunteer volunteer = volunteerRepository.findById(id)
					.orElseThrow(() -> new ResourceNotFoundException("Volunteer does not exit with id: " + id));
			// get and set uses
			
        volunteer.setV_NAME(volunteerDetails.getV_NAME());
        
        volunteer.setV_BLOOD_GROUP(volunteerDetails.getV_BLOOD_GROUP());
        
        volunteer.setV_CONTACT(volunteerDetails.getV_CONTACT());
        
     
        
        volunteer.setV_ADDRESS(volunteerDetails.getV_ADDRESS());
        
        volunteer.setV_CITY_NAME(volunteerDetails.getV_CITY_NAME());
        
        volunteer.setV_EMAIL(volunteerDetails.getV_EMAIL());
        
        volunteer.setV_USER_ID(volunteerDetails.getV_USER_ID());
        
        volunteer.setV_PASSWORD(volunteerDetails.getV_PASSWORD());
			
			Volunteer updatedVolunteer = volunteerRepository.save(volunteer);
		return ResponseEntity.ok(updatedVolunteer);
		}
		
// Delete volunteer rest API
				@DeleteMapping("/volunteer/{id}")
				public ResponseEntity <Map<String,Boolean>> deleteVolunteer(@PathVariable Long id)
				{
					Volunteer volunteer = volunteerRepository.findById(id)
							.orElseThrow(() -> new ResourceNotFoundException("Volunteer does not exit with id: " + id));
					
					volunteerRepository.delete(volunteer);
					Map<String,Boolean>response = new HashMap<>();
					
						return ResponseEntity.ok(response);
				}
		
}
