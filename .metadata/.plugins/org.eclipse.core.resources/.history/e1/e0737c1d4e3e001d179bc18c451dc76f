package com.example.demo.controller;
import java.util.HashMap;

import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.exception.ResourceNotFoundException;
import com.example.demo.model.Individual;
import com.example.demo.repository.IndividualRepository;

@RestController
@RequestMapping("/api/v1")
public class IndividualController {

	@Autowired
	private IndividualRepository individualRepository ;
	
	        // get all individual
			@GetMapping("/individual")
			public List<Individual> getAllIndividual()
			{
				return individualRepository.findAll();
			}
			// create individual rest API
			@PostMapping ("/individual")
			public Individual createIndividual(@RequestBody Individual individual )
			{
				return individualRepository.save(individual);
			}
			
		    // get individualbyID Rest API	
			@PostMapping ("/individual/{id}")
			public ResponseEntity<Individual> getIndividualById(@PathVariable Long id)
			{
				Individual individual = individualRepository.findById(id)
						.orElseThrow(() -> new ResourceNotFoundException("Individual does not exit with id: " + id));
			return ResponseEntity.ok(individual);
			}
			// update individual rest API
			@PutMapping("/individual/{id}")
			public ResponseEntity <Individual> updateIndividual(@PathVariable Long id, @RequestBody Individual individualDetails)
			{
				Individual individual = individualRepository.findById(id)
						.orElseThrow(() -> new ResourceNotFoundException("Individual does not exit with id: " + id));
				
				individual.setIN_NAME(individualDetails.getIN_NAME());
				individual.setIN_ADDRESS(individualDetails.getIN_ADDRESS());
				individual.setIN_CONTACT(individualDetails.getIN_CONTACT());
				individual.setIN_EMAIL(individualDetails.getIN_EMAIL());
				individual.setDONATION_TYPE(individualDetails.getDONATION_TYPE());
				individual.setAMOUNT(individualDetails.getAMOUNT());
				
				Individual updatedIndividual = individualRepository.save(individual);
			return ResponseEntity.ok(updatedIndividual);
			}
				
			// delete individual rest API
						@DeleteMapping("/individual/{id}")
						public ResponseEntity <Map<String,Boolean>> deleteIndividual(@PathVariable Long id)
						{
							Individual individual = individualRepository.findById(id)
									.orElseThrow(() -> new ResourceNotFoundException("Individual does not exit with id: " + id));
							individualRepository.delete(individual);
							Map<String,Boolean>response = new HashMap<>();
							
								return ResponseEntity.ok(response);
							
							
						
						}
}

			
		

